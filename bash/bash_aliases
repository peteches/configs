#aliases
alias sort="sort -S$(($(sed '/MemT/!d;s/[^0-9]*//g' /proc/meminfo)/1024-200)) "
# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias vim='vim -p'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

alias vless="vim --cmd 'let no_plugin_maps = 1' -c 'runtime! macros/less.vim' -"

#
#Functions


# get_cursor_row()
#	returns the row cursor on
#
# inputs	-
# outputs	- number
# return value	- 0 if successfull
# side effects	-
get_cursor_row()
{
    exec < /dev/tty
    oldstty=$(stty -g)
    stty raw -echo min 0
    # on my system, the following line can be replaced by the line below it
    echo -en "\033[6n" > /dev/tty
    # tput u7 > /dev/tty    # when TERM=xterm (and relatives)
    IFS=';' read -r -d R -a pos
    stty $oldstty
    # change from one-based to zero based so they work with: tput cup $row $col
    row=$((${pos[0]:2} - 1))    # strip off the esc-[

    echo $row
}

# display_title()
#	Displays string
#
# inputs	- string
# outputs	- string
# return value	- 0 if successfull
# side effects	- sets variable error to 0
display_title()
{
    msg="$*"
    num_dots=$( bc <<< $( tput cols )-13-${#msg} )

    printf "%s " "$msg"
    eval printf "%c" .{1..$num_dots}
    error=0
    tput sc
    echo ""
}

# display_status()
#	Description
#
# inputs	- message string
# outputs	-
# return value	- 0 if successfull
# side effects	-
display_status()
{
    red=$( tput setaf 1 )
    green=$( tput setaf 2 )
    norm=$( tput setaf 9 )

    r=$( get_cursor_row )

    tput rc

    if [[ $error -eq 0 ]]; then
        echo -e "${green}[ Success! ]${norm}"
    else
        echo -e "${red}[ Failure! ]${norm}"
    fi
    
    tput cup $r 0
}

yum() {
	if [[ "${1}" == "search" ]];then
		sudo yum -y "${@}" | sed -e '$ d' -e '1,/^=\+ N\/S Matched/ d' | column -t -s:
	else
		sudo yum -y "${@}"
	fi
}

history(){
  syncHistory
    builtin history "$@"
}

syncHistory(){
	builtin history -a
	HISTFILESIZE=$HISTFILESIZE
	builtin history -c
	builtin history -r
}

cd(){
	local dir error

	## infinate loop
	while :;do
		case $1 in
			--) 
				break
			;;
			-)
				popd
				return $?
			;;
			-*)
				shift
			;;
			*)
				break
			;;
		esac
	done

	dir=$1

	if [[ -n "$dir" ]];then
		pushd "$dir"
	else
		pushd "$HOME"
	fi 2>/dev/null
	error=$?

	if [[ $error -ne 0 ]];then
		# if pushd failed then let cd report the error so as not
		# to confuse my fragile brain later.
		builtin cd "$dir"
	fi
	return $error
} > /dev/null

cdm(){
	local dir IFS=$'\n' item

	for dir in $(dirs -l -p);do
		[[ "$dir" == "$PWD" ]] && continue

		case ${item[*]} in
			*"$dir:"*)   ## Dir allready in array
			;;
			*)
				item+=( "$dir:cd '$dir'" )
			;;
		esac
	done

	menu "${item[@]}" Quit:
}

menu(){
	local IFS=$' \t\n'
	local num n=1 opt item cmd
	for item;do
		printf " %3d. %s\n" "$n" "${item%%:*}"
		n=$(( $n + 1 ))
	done
	echo
	
	## If $items < 10 don't need to press enter
	
	if [[ $# -lt 10 ]];then
		opt=-sn1
	else
		opt=
	fi

	read -p "(1 to $#) ==> " $opt num

	## check entry valid
	
	case $num in
		[qQ0] | "" )
				return
		;;
		*[^0-9]* | 0*)
				printf "\aInvalid response %s\n" "$num" >&2
				return 1
		;;
	esac
	
	echo

	if [[ "$num" -le "$#" ]];then
		eval "${!num#*:}"
	else
		printf "\aInvalid response: %s\n" "$num" >&2
		return 1
	fi
}


md(){
	mkdir -p "$1" && cd "$1"
}

