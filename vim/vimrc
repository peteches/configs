"  Setup {{{

let g:pathogen_disabled=
	\ [
	\ ]

filetype off
"call pathogen to organise plugins
call pathogen#infect()
call pathogen#helptags()
filetype plugin indent on
syntax on

" }}}

" define some backups {{{
if filewritable("$HOME/.vimbackups/") != 2
	call system("mkdir -p $HOME/.vimbackups/")
endif

set backup
set backupdir=$HOME/.vimbackups/
set backupcopy=auto
set writebackup

" }}}

" Commands {{{
" man page lookups {{{
source ~/.vim/ftplugin/man.vim
com! -nargs=1 ManV :vnew | set ft=man | Man <args>
com! -nargs=1 ManT :tabnew | set ft=man | Man <args>

" }}}
" Help windows {{{
com! -nargs=* Vhelp vert help <args>
" }}}

" }}}

" General Settings {{{

"set listchars=tab:>-,trail:.,extends:>,precedes:<,eol:$,nbsp:-
"set statusline=[%n]\ %y\ ./%-f%M%R\ %=Col:\ %02c\ (%02v)\ Line:\ %02l\ /\ %02L\ %P
set autoindent
set background=dark
set cmdheight=2
set confirm
set foldclose=all
set foldcolumn=2
set foldopen=hor,insert,jump,mark,search,tag,undo
set ignorecase
set incsearch
set laststatus=2
set list
set listchars=tab:>-,trail:·,extends:>,precedes:<,eol:᚜,nbsp:-
set noexpandtab
set nohls
set noshowmode
set modeline
set modelines=5
set notimeout ttimeout ttimeoutlen=200
set number
set pastetoggle=<F2>
set ruler
set scrolloff=10
set shiftwidth=8
set showcmd
set showmatch
set smartcase
set softtabstop=8
set spelllang=en_gb
set tabpagemax=100
set tabstop=8
set textwidth=1000
set title
set viminfo='1000,f1,:100,/100,%,!
set visualbell
set wildmenu

if v:version > 703
	set relativenumber
endif

" }}}

" Plugin Settings {{{

" tmux runner (VTR) {{{
let g:VtrPercentage = 20
let g:VtrOrientation = "v"
let g:VtrInitialCommand = ""
let g:VtrGitCdUpOnOpen = 1
let g:VtrClearBeforeSend = 1
let g:VtrPrompt = "Command to run: "
let g:VtrUseVtrMaps = 1
let g:VtrClearOnResize = 0
let g:VtrClearOnReorient = 1
let g:VtrClearOnReattach = 1
let g:VtrDetachedName = "VTR_Pane"
let g:VtrClearSequence = ""
let g:VtrStripLeadingWhitespace = 1
let g:VtrClearEmptyLines = 1
let g:VtrAppendNewLine = 0
" }}}

" Switch {{{

" set switch
let g:switch_custom_definitions =
	\ [
	\	['yes', 'no'],
	\	['true', 'false'],
	\	['left', 'right'],
	\	['on', 'off'],
	\	['||', '&&'],
	\	['udp', 'tcp'],
	\	['low', 'medium', 'high'],
	\ ]

" Switch mappings
nnoremap - :Switch<CR>

" }}}

" vim-pad {{{
let g:pad#dir = "~/.notes/"
let g:pad#default_format = "pandoc"
let g:pad#modeline_position = "top"
let g:pad#default_file_extension = ".md"
let g:pad#open_in_split = 0



if filewritable(g:pad#dir) != 2
	call system("mkdir -p " . g:pad#dir)
endif

" }}}

" mediumMode {{{
let g:mediummode_reset_events = [
	\ 'InsertLeave',
	\ 'BufEnter',
	\ 'CursorHold',
	\ 'TextChanged',
	\ ]

let g:mediummode_allowed_character_motions = 5

" }}}

" airline {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts=1

" }}}

" Ragtag {{{
" let ragtag maps be global
let g:ragtag_global_maps = 1

" }}}

" UltiSnip {{{
let g:UltiSnipsEditSplit = "vertical"
let g:UltiSnipsSnippetDirectories=['snips', 'UltiSnips']
let g:UltiSnipsExpandTrigger= '<tab>'
let g:UltiSnipsListSnippets = '<C-L>'
let g:UltiSnipsJumpForwardTrigger= '<C-J>'
let g:UltiSnipsJumpBackwardTrigger= '<C-K>'
nmap <LEADER>es :UltiSnipsEdit<CR>

" }}}

" Colour scheme switcher {{{
let g:colorscheme_switcher_keep_background = 1

" set runtime so we can use the plugin from vimrc
runtime plugin/colorscheme-switcher.vim

" }}}

" pep8 {{{
let g:pep8_opts = [ '--max-line-length=90' ]
" }}}

" }}}

" usefull shortcuts {{{
" swap : and ;
nnoremap : ;
nnoremap ; :

"Visual block far more useful than regular visual mode
nnoremap v <C-v>
" for the rare occasion characterwise visuals are useful.
nnoremap <C-v> v

" auto fix common typos
abbr slef self
abbr resutl result
abbr fro for
abbr fiel file
abbr teh the
abbr fsp /usr/lib/frogshell/
nnoremap Y y$

" make the <c-y> more useful by doing whole words
inoremap <expr> <c-y> matchstr(getline(line('.')-1), '\%' . virtcol('.') . 'v\%(\k\+\\|.\)')
" Same for <c-e>
inoremap <expr> <c-e> matchstr(getline(line('.')+1), '\%' . virtcol('.') . 'v\%(\k\+\\|.\)')

" shortcuts for common surround comands
inoremap <LEADER>,, <ESC>viWS'Ea
inoremap <LEADER>.. <ESC>viWS"Ea

nnoremap <LEADER>er :call OpenRC()<CR>
nnoremap <LEADER>ef :exe ":vsplit ~/.vim/ftplugin/".expand(&filetype).".vim"<CR>
inoremap <LEADER>gf <ESC><C-W>gf
nnoremap gf <C-W>gf

" window mappings
nnoremap <C-h> <c-w>h
nnoremap <C-l> <c-w>l
nnoremap <C-j> <c-w>j
nnoremap <C-k> <c-w>k

"file completion
inoremap <C-f> <C-x><C-f>
"line completion
inoremap <C-l> <C-x><C-l>

" Git fugitive mappings
nnoremap <LEADER>gb :Gblame w<CR>
nnoremap <LEADER>gd :Gdiff<SPACE>
nnoremap <LEADER>gs :Gstatus<CR>
nnoremap <LEADER>gc :Gcommit -v<CR>
nnoremap <LEADER>gl :Glog<CR>
nnoremap <LEADER>gr :Gread<CR>
nnoremap <LEADER>ge :Gedit<CR>
nnoremap <LEADER>gw :Gwrite<CR>

" for surrounding the character under the cursor with spaces.
nnoremap <leader>s<space> i<space><esc>2l.
nnoremap <leader>a<space> a<space><esc>
nnoremap <leader>i<space> i<space><esc>

" Highlight the 80th column
call matchadd('ColorColumn', '\%80v', 100)

nnoremap <leader>rts :call TrimWhiteSpace()<CR>

"       drag      visuals
vmap    <expr>    <S-h>                DVB_Drag('left')
vmap    <expr>    <S-l>                DVB_Drag('right')
vmap    <expr>    <S-j>                DVB_Drag('down')
vmap    <expr>    <S-k>                DVB_Drag('up')
vmap    <expr>    D                DVB_Duplicate()

" }}}

" functions {{{
function! TrimWhiteSpace()
	%s/\s\+$//e
endfunction

function! LoadTemplate()
	silent! 0r ~/.vim/skel/template.%:e
endfunction

function! IsBufferBlank()
	if getline(1, '$') == [''] && ! &mod
		return 1
	else
		return 0
	endif
endfunction

function! OpenRC()
	if IsBufferBlank()
		:edit $MYVIMRC
	else
		:vnew $MYVIMRC
	endif
endfunction

"""""""""""""""""""""""""""""
"  re use existing buffers  "
"""""""""""""""""""""""""""""
function! s:GotoOrOpen(command, ...)
	for file in a:000
		if bufwinnr(file) != -1
			exec "sb " . file
		else
			exec a:command . " " . file
		endif
	endfor
endfunction
command! -nargs=+ GotoOrOpen call s:GotoOrOpen(<f-args>)

function! FoldGitConflict()
	let nline = getline(v:lnum)
	let line = getline(v:lnum + 1)

	if match(line, '^<<<<<<<') >= 0
		return "<1"
	elseif match(nline, '^>>>>>>>') >= 0
		return "<1"
	else
		return "1"
	endif
endfunction

function! InitConflictedFile()
	let conflicted_files=system("git diff --name-only --diff-filter=U")
	let this_file=substitute(expand('%'),system("git rev-parse --show-toplevel"), "", "")
	if match(conflicted_files, this_file) != -1
		set foldenable
		set foldmethod=expr
		set foldexpr=FoldGitConflict()
		normal gg
		call search('^<<<<<<< HEAD')
		normal zo
	endif
endfunction

" }}}

" Autocmds {{{

if has("autocmd")
	augroup WHITESPACE " {{{
		autocmd!
		autocmd FileWritePre,FileAppendPre,FilterWritePre,BufWritePre * if match(expand('%'), 'fugitive://') != 0 | :call TrimWhiteSpace()
	augroup END " }}}
	augroup TEMPLATES " {{{
		autocmd!
		autocmd BufNewFile * call LoadTemplate()
	augroup END " }}}
	augroup MAN " {{{
	autocmd!
		autocmd FileType man exe "set nolist colorcolumn=\"\" nonu"
	augroup END }}}
	augroup GITCONFLICT " {{{
		autocmd!
		autocmd BufRead * call InitConflictedFile()
	augroup END

	augroup reload_rc
		autocmd!
		autocmd BufWritePost $MYVIMRC source $MYVIMRC
	augroup END " }}}
endif
" }}}

" Colours {{{

highlight ColorColumn ctermbg=235
call matchadd('ColorColumn', '\%81v', 100)

hi DIFFHEAD ctermfg=1
hi DIFFMIDDLE ctermfg=1
hi DIFFBRANCH ctermfg=1

call matchadd('DIFFHEAD', '^<<<<<<< HEAD')
call matchadd('DIFFMIDDLE', '^=======')
call matchadd('DIFFBRANCH', '^>>>>>>>.*')
" }}}
