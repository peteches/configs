
filetype off
"call pathogen to organise plugins
call pathogen#infect()
call pathogen#helptags()
filetype plugin indent on
syntax on

" set runtime to include man page lookups
source ~/.vim/ftplugin/man.vim
com! -nargs=1 ManV :vnew | set ft=man | Man <args>
com! -nargs=1 ManT :tabnew | set ft=man | Man <args>

" fugitive mappings
" ensure Gblame always ignore whitespace
cnoremap Gb Gblame w

"set listchars=tab:>-,trail:.,extends:>,precedes:<,eol:$,nbsp:-
"set statusline=[%n]\ %y\ ./%-f%M%R\ %=Col:\ %02c\ (%02v)\ Line:\ %02l\ /\ %02L\ %P
set autoindent
set cmdheight=2
set confirm
set foldclose=all
set foldcolumn=2
set foldopen=hor,insert,jump,mark,search,tag,undo
set ignorecase
set incsearch
set laststatus=2
set list
set listchars=tab:>-,trail:·,extends:>,precedes:<,eol:᚜,nbsp:-
set noexpandtab
set nohls
set noshowmode
set notimeout ttimeout ttimeoutlen=200
set number
set pastetoggle=<F2>
set ruler
set scrolloff=10
set shiftwidth=8
set showcmd
set showmatch
set smartcase
set softtabstop=8
set spelllang=en_gb
set tabpagemax=100
set tabstop=8
set textwidth=1000
set tildeop
set title
set viminfo='1000,f1,:100,/100,%,!
set visualbell

if v:version > 703
	set relativenumber
endif

" Command-t stuff
" File scanner uses git ls-files if in a git repo
" Falls back to find if not.
let g:CommandTFileScanner = "git"
let g:CommandTAlwaysShowDotFiles = 1
let g:CommandTScanDotDirectories = 1
let g:CommandTMatchWindowReverse = 1

"""""""""""""""""""""""""""""
"  re use existing buffers  "
"""""""""""""""""""""""""""""
function! s:GotoOrOpen(command, ...)
	for file in a:000
		if bufwinnr(file) != -1
			exec "sb " . file
		else
			exec a:command . " " . file
		endif
	endfor
endfunction
command! -nargs=+ GotoOrOpen call s:GotoOrOpen(<f-args>)
let g:CommandTAcceptSelectionCommand = 'GotoOrOpen e'
let g:CommandTAcceptSelectionTabCommand = 'GotoOrOpen tabe'
let g:CommandTAcceptSelectionSplitCommand = 'GotoOrOpen sp'
let g:CommandTAcceptSelectionVSplitCommand = 'GotoOrOpen vs'

" let ragtag maps be global
let g:ragtag_global_maps = 1


"" powerline stuff
"set rtp+=~/.vimrc/bundle/powerline
"let g:powerline_config_path = expand("$HOME/.config/powerline")

"" UltiSnip stuff
let g:UltiSnipsEditSplit = "vertical"
let g:UltiSnipsSnippetDirectories=['snips', 'UltiSnips']
let g:UltiSnipsExpandTrigger= '<tab>'
let g:UltiSnipsListSnippets = '<C-L>'
let g:UltiSnipsJumpForwardTrigger= '<C-J>'
let g:UltiSnipsJumpBackwardTrigger= '<C-K>'
nmap <LEADER>es :UltiSnipsEdit<CR>

"" Rainbow parenthesis
let g:niji_match_all_filetypes = 1
let g:niji_dark_colours = [['brown', 'RoyalBlue3'],
							\ ['Darkblue', 'SeaGreen3'],
							\ ['darkgray', 'DarkOrchid3'],
							\ ['darkgreen', 'firebrick3'],
							\ ['darkcyan', 'RoyalBlue3']]
let g:niji_light_colours = g:niji_dark_colours

"" Tagbar stuff
let g:tagbar_ctags_bin = "/usr/bin/ctags"
let g:tagbar_compact = 1
let g:tagbar_indent = 2

let NERDTreeQuitOnOpen=1
let NERDTreeIgnore=[ '\.py[ocd]$[[file]]' ]
let g:pydiction_location='~/.vim/bundle/pydiction-1.2/complete-dict'

" Gundo stuff
let g:gundo_preview_bottom = 1

abbr slef self
abbr resutl result
abbr fro for
abbr fiel file
abbr teh the
abbr fsp /usr/lib/frogshell/
map Y y$
" <F1> help
" <F2> pasteToggle
map <F3> <ESC>:set nu! list! foldenable!<CR>
map <F4> <ESC>:NERDTreeToggle<CR>
map <F5> <ESC>:GundoToggle<CR>

" make the <c-y> more useful by doing whole words
inoremap <expr> <c-y> matchstr(getline(line('.')-1), '\%' . virtcol('.') . 'v\%(\k\+\\|.\)')

imap <LEADER>,, <ESC>viWS'Ea
imap <LEADER>.. <ESC>viWS"Ea
imap <LEADER>w' <ESC>viwS'Ea
imap <LEADER>w2 <ESC>viwS"Ea
nmap <LEADER>+x <ESC>:!chmod +x %<CR>

nmap <LEADER>er :vsplit $MYVIMRC<CR>
nmap <LEADER>sr :so $MYVIMRC<CR>
nmap <LEADER>ef :exe ":vsplit ~/.vim/ftplugin/".expand(&filetype).".vim"<CR>
inoremap <LEADER>gf <ESC><C-W>gf
nnoremap gf <C-W>gf

"learn not to use arrow keys!
nmap <LEFT> <NOP>
nmap <RIGHT> <NOP>
nmap <UP> <NOP>
nmap <DOWN> <NOP>

" window mappings
map <C-h> <c-w>h
map <C-l> <c-w>l
map <C-j> <c-w>j
map <C-k> <c-w>k

"file completion
imap <C-f> <C-x><C-f>

" for surrounding the character under the cursor with spaces.
nnoremap <leader>s<space> i<space><esc>2l.
nnoremap <leader>a<space> a<space><esc>
nnoremap <leader>i<space> i<space><esc>

if v:version >= 703
	execute "set colorcolumn=80"
endif

cnoremap help vert help

"sign off patch
abbr sign Signed-off-by: "Pete \"Peteches\" McCabe" <eudyptula@petemccabe.gb.net>

if has("autocmd")
	augroup TEMPLATES
		autocmd!
		autocmd BufNewFile * call LoadTemplate()
	augroup END
	augroup MAN
	autocmd!
		autocmd FileType man exe "set nolist colorcolumn=\"\" nonu"
	augroup END
endif

colorscheme solarized

"  override solarized colors for SignColumn
"  override solarized colors for SignColumn
"  ShowMarks hi groups. (not in solarized colourscheme.
hi SignColumn ctermbg=0
hi ShowMarksHLl ctermfg=166 ctermbg=0
hi ShowMarksHLu ctermfg=160 ctermbg=0
hi ShowMarksHLo ctermfg=33 ctermbg=0
hi ShowMarksHLm ctermfg=64 ctermbg=0

function! LoadTemplate()
	silent! 0r ~/.vim/skel/template.%:e
	"Highlight %VAR% placeholders with the TODO colour group
	syn match Todo "%\u\+%" containedIn=ALL
endfunction

let $XIKI_DIR="/home/peteches/area_51/xiki"
so $XIKI_DIR/etc/vim/xiki.vim
