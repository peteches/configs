###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet ife "Conditional if..else (ife)"
if($1)
{
	${2:# body...}
}$0
endsnippet

snippet elsif "elif" !
elsif($1)
{
	${2:## code}
}$0
endsnippet

snippet else "else condition"
else
{
	${3:# else...}
}$0
endsnippet

snippet xunless "Conditional one-line (unless)"
${1:expression} unless ${2:${VISUAL:condition}};
$0
endsnippet

snippet xif "Conditional one-line (xif)"
${1:expression} if(${2:${VISUAL:condition}});
$0
endsnippet

snippet sub "Function (sub)"
# ${1:func_name}()
#	${2:desc}
#
# inputs	-$3
# outputs	-$4
# return value	-${5: -1 on error}
# side effects	-$6
sub $1
{
	${7:${VISUAL:# body...}}
}$0
endsnippet

snippet xfore "Loop one-line (xforeach)"
${1:expression} foreach @${2:array};
$0
endsnippet

snippet xwhile "Loop one-line (xwhile)"
${1:expression} while ${2:condition};
$0
endsnippet

snippet test "Test"
#!/usr/bin/perl -w

use strict;
use Test::More tests => ${1:1};
use ${2:ModuleName};

ok(${3:assertion});
$0
endsnippet

snippet class "class"
package ${1:ClassName};

${2:use base qw(${3:ParentClass});}${2/.+/\n\n/}sub new {
	my $class = shift;
	$class = ref $class if ref $class;
	my $self = bless {}, $class;
	$self;
}

1;

endsnippet

snippet eval "eval"
eval
{
	${1:# do something risky...}
};
if($@)
{
	${2:# handle failure...}
}$0
endsnippet

snippet for "for"
for(my $${1:var} = 0; $$1 < ${2:expression}; $$1++)
{
	${3:${VISUAL:# body...}}
}$0
endsnippet

snippet fore "foreach"
foreach ${1:my $${2:x}} (@${3:array})
{
	${4:${VISUAL:# body...}}
}$0
endsnippet

snippet if "if"
if($1)
{
	${2:${VISUAL:# body...}}
}$0
endsnippet

snippet slurp "slurp"
my $${1:var};
{ local $/ = undef; local *FILE; open FILE, "<${2:file}"; $$1 = <FILE>; close FILE }
$0
endsnippet

snippet unless "unless"
unless($1)
{
	${2:# body...}
}$0
endsnippet

snippet while "while"
while($1)
{
	${2:${VISUAL:# body...}}
}$0
endsnippet

snippet until "until"
until($1)
{
	${2:${VISUAL:# body...}}
}$0
endsnippet

snippet open "open file, pipe or descriptor" !b
open(${1:fh}, "${2:<}", "${3:filepath}")${4: or die("Cannot open $2 $3: $!")};

${5:${VISUAL:## code}}

close($1)${6: or die("Cannot close $3: $!")};
$0
endsnippet

snippet pr "Print" !b
print ${1:${VISUAL:"txt"}}
endsnippet
# vim:ft=snippets:
