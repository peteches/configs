
###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet #!
#!/bin/sh

endsnippet

snippet !env "#!/usr/bin/env (!env)"
#!/usr/bin/env bash 

endsnippet

snippet dt "display_title" b
display_title "${1:title}"
${2:${VISUAL:## code}} || error=$?
display_status
$0
endsnippet

snippet func "function def and proto" b
# ${1:func_name}()
#	${2:Description}
#
# inputs	-${3}
# outputs	-${4}
# return value	-${5: 0 if successfull}
# side effects	-${6}
$1()
{
	${7:${VISUAL:## code}}
}$0
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`})"
${3:${4/(.+)/trap "/}${4:rm -f '$${1/.*\s//}'}${4/(.+)/" 0               # EXIT\n/}${5/(.+)/trap "/}${5:rm -f '$${1/.*\s//}'; exit 1}${5/(.+)/" 2       # INT\n/}${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'; exit 1}${6/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern} )
		${3:## code}
	;;

	$0
esac
endsnippet

snippet pat "pattern for case statement" !b
${1:pattern} )
	${2:${VISUAL:## code}}
${3:;;}

$0
endsnippet

snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
	${0:${VISUAL:## code}}
endsnippet

snippet fori "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
	${2:${VISUAL:## code}}
done
$0
endsnippet

snippet for "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
	${3:${VISUAL:## code}}
done
$0
endsnippet

snippet here "here document (here)"
<<-${1:EOF}
	${2:string}
${1/['"`](.+)['"`]/$1/}
$0
endsnippet

snippet if "if ... then (if)"
if ${2:[[ ${1:condition} ]]}; then
	${3:${VISUAL:## code}}
fi
$0
endsnippet

snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
	${3:#statements}
$0
endsnippet

snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
	${3:${VISUAL:## code}}
done
$0
endsnippet

snippet while "while ... (done)"
while ${2:[[ ${1:condition} ]]}; do
	${3:${VISUAL:## code}}
done
$0
endsnippet

# vim:ft=snippets:
